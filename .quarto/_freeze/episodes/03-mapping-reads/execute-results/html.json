{
  "hash": "08dba990fe6794331c34619e9c69fea2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"From fastq files to alignments\"\nengine: knitr\nformat:\n    html:\n        fig-width: 5\n        fig-height: 4\n        code-annotations: hover\n---\n\n\n\n\nThe moment is there: you received the FASTQ files from your sequencing provider! Now what?\n\n## Quality control: `fastqc`\n\nThe first step in the RNA-seq workflow is to assess the quality of the sequencing reads. Sequence reads generated from next-generation sequencing technologies come in the FASTQ file format. This file format evolved from FASTA: it contains sequence data, but also contains quality information. For a single record (sequence read) there are four lines, each of which are described below:\n\n|Line|Description|\n|----|-----------|\n|1|Always begins with '@' and then information about the read|\n|2|The actual DNA sequence|\n|3|Always begins with a '+' and sometimes the same info in line 1|\n|4|Has a string of characters which represent the quality scores; must have same number of characters as line 2|\n\nLet's run `fastqc` on one sample:\n\n\n\n\n::: {.cell filename='bash'}\n\n```{.bash .cell-code}\nfastqc -o /workspace/fastqc /datasets/Arabidopsis_sample1.fq.gz\n```\n:::\n\n\n\n\nDoing this manually for every sample would be quite tiring, especially when we would have many samples. Let's write a `bash` for loop to take care of this for us:\n\n\n\n\n::: {.cell filename='bash'}\n\n```{.bash .cell-code}\nfor filename in  /datasets/*.fq.gz # <1>\n  do\n    fastqc -o fastqc $filename # <2>\n  done\n```\n:::\n\n\n\n\n1. Here we define a variable `filename` that will subsequently get the values of all datasets matching the `/datasets/*.fq.gz` statement, where `*` acts as a wildcard.\n2. Here we add the actual command, where `$filename` will subsequently be filled in with all of our four filenames.\n\n## Trimming: `trimmomatic`\n\nOften, `fastqc` reports will reveal that sequencing adapters are still present in your reads. This is known as 'adapter contamination', and the presence of these sequences in the reads might affect how the reads map to the genome of interest. So, we need to get rid of them. We will `trimmomatic` to do this. \n\n\n\n\n::: {.cell filename='bash'}\n\n```{.bash .cell-code}\n# add trimmomatic command here\n```\n:::\n\n\n\n\n::: {.callout-tip title=\"Exercise\" icon=\"false\"}\nAfter running `trimmomatic`, the adapter contamination should be gone.\n\n1. How could you check whether `trimmomatic` indeed did it's job?\n2. Write a command to check this.\n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\n1. We can run `fastqc` again, this time on the trimmed reads.\n2. \n\n\n\n::: {.cell filename='bash'}\n\n```{.bash .cell-code}\nfastqc -o /workspace/fastqc /datasets/Arabidopsis_sample1.trimmed.fq.gz\n```\n:::\n\n\n\n:::\n\n## Mapping: `STAR`\n\nOur reads are now ready for mapping. Mapping reads means figuring out where each read from the RNA-seq experiment originally came from within the genome. For RNA-seq experiments, it's important to pick a **splice-aware** aligner, since a RNA-seq read can span an exon-intron-exon boundary **(TODO: add a figure here to demonstrate this)**.\n\n::: {.callout-tip title=\"Question\" icon=\"false\"}\nSo, for RNA-seq we need splice-aware aligners. Can you come up with an experiment that would not require a splice-aware aligner program?\n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\nIn experiments where we don't need to think about exon-intron boundaries. This is the case when the reads originate from genomic DNA, for example for whole genome sequencing experiments, or enrichment sequencing experiments like Chip-Seq. \n:::\n\nTo use an aligner, we must first get the **reference genome** and then *index* the reference genome. Indexing the genome prepares the genome in a way that allows a computer to search it efficiently. The genome, a multi-million basepair long string of text, is encoded into a different, computer-friendly datastructure such as a suffix tree. The details of this procedure are beyond the scope of this workshop, but it's important to do it!\n\nHere, we download the *Arabidopsis thaliana* reference genome and index it:\n\n\n\n\n::: {.cell filename='bash'}\n\n```{.bash .cell-code}\n# Index command here\n```\n:::\n\n\n\n\nAllright, let's finally run `STAR`: \n\n\n\n\n::: {.cell filename='bash'}\n\n```{.bash .cell-code}\n# run STAR here\n```\n:::\n\n\n\n\n### BAM and SAM files\n\n*TODO: explain BAM and SAM files here*\n\n### Inspecting the mapping on a genome browser\n\n## Counting: `featureCounts`\n\n## A note on the specific tools used here\n\nAs in many things in programming: there are many ways to reach the same goal. Here we have selected mapping, trimming and counting tools that we have available and have experience with, but there are many others that perform just as well. The following table highlights a few popular alternative options:\n\n| Task | Tool used here | Alternative tools |\n| ---- | -------------- | ----------------- |\n| Trimming | `Trimmomatic` | `cutadapt`, `fastp` |\n| Mapping | `STAR` | `HISAT2` |\n| Counting | `featureCounts` | `StringTie` |",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}