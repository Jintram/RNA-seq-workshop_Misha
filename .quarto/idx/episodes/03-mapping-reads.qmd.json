{"title":"From reads to alignments","markdown":{"yaml":{"title":"From reads to alignments","engine":"knitr","format":{"html":{"fig-width":5,"fig-height":4,"code-annotations":"hover"}}},"headingText":"Quality control: `fastqc`","containsRefs":false,"markdown":"\n\nThe moment is there: you received the FASTQ files from your sequencing provider! Now what?\n\n\nThe first step in the RNA-seq workflow is to assess the quality of the sequencing reads. Sequence reads generated from next-generation sequencing technologies come in the FASTQ file format. This file format evolved from FASTA: it contains sequence data, but also contains quality information. For a single record (sequence read) there are four lines, each of which are described below:\n\n|Line|Description|\n|----|-----------|\n|1|Always begins with '@' and then information about the read|\n|2|The actual DNA sequence|\n|3|Always begins with a '+' and sometimes the same info in line 1|\n|4|Has a string of characters which represent the quality scores; must have same number of characters as line 2|\n\nLet's run `fastqc` on one sample:\n\n```{bash filename=\"bash\"}\n#| eval: false\nfastqc -o fastqc /datasets/Arabidopsis_sample1.fq.gz\n```\n\nDoing this manually for every sample would be quite tiring, especially when we would have many samples. Let's write a `bash` for loop to take care of this for us:\n\n```{bash filename=\"bash\"}\n#| eval: false\nfor filename in  /datasets/*.fq.gz # <1>\n  do\n    fastqc -o fastqc $filename # <2>\n  done\n```\n\n1. Here we define a variable `filename` that will subsequently get the values of all datasets matching the `/datasets/*.fq.gz` statement, where `*` acts as a wildcard.\n2. Here we add the actual command, where `$filename` will subsequently be filled in with all of our four filenames.\n\n`fastq` generates reports of each sample in `.html` format:\n\n```{bash filename=\"bash\"}\n#| eval: false\nls ... # TODO: add ls outcome here to show that we have 4 .html files now\n```\n\nLet's download one of them, and inspect the results:\n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: download to local instructions here (if you are working on a server)\n```\n\n`fastqc` gives the reads of each sample a score (Pass, Warning, or Fail) on several different modules and this is reported in the **Summary**. The next section contains basic statistics like the number of reads, average sequence length, and the GC content. Generally it is a good idea to keep track of the total number of reads sequenced for each sample and to make sure the read length and %GC content is as expected. One of the most important analysis modules is the **“Per base sequence quality”** plot. This plot provides the distribution of quality scores at each position in the read across all reads. This plot can alert us to whether there were any problems occuring during sequencing and whether we might need to contact the sequencing facility.  Other modules are discussed in detail [here](https://hbctraining.github.io/Intro-to-rnaseq-hpc-salmon/lessons/qc_fastqc_assessment.html). Note that nearly all sequencing datasets will show yellow warnings or red fails: `fastqc` is quite conservative. Your experiment is not lost if you get warnings or fails, but it warrants additional inspection of the reads.\n\n**TODO: add screenshots of good/bad fastqc results**\n\n## Trimming: `trimmomatic`\n\nA common anomaly detected by `fastqc` is sequencing adapters still being present some of the the reads (shown in **Overrepresented sequences** table). This is known as 'adapter contamination', and the presence of these adapter sequences in the reads might affect how the reads map to the genome of interest. So, we need to get rid of them. We will `trimmomatic` to do this. In addition, we can ask `trimmomatic` to trim low quality bases from the reads.\n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: add trimmomatic command here\n```\n\n::: {.callout-tip title=\"Exercise\" icon=\"false\"}\nAfter running `trimmomatic`, the adapter contamination should be gone.\n\n1. How could you check whether `trimmomatic` indeed did it's job?\n2. Write a command to check this.\n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\n1. We can run `fastqc` again, this time on the trimmed reads.\n2. \n```{bash filename=\"bash\"}\n#| eval: false\nfastqc -o /workspace/fastqc /datasets/Arabidopsis_sample1.trimmed.fq.gz\n```\nBy inspecting the `.html` report of the trimmed reads, we should see that the quality of the read sets has now improved.\n:::\n\n## Mapping: `STAR`\n\nOur reads are now ready for mapping. Mapping reads means figuring out where each read from the RNA-seq experiment originally came from within the genome. For RNA-seq experiments, it's important to pick a **splice-aware** aligner, since a RNA-seq read can span an exon-intron-exon boundary \n\n**TODO: add a figure here to demonstrate this, like the one found [here](https://hbctraining.github.io/Intro-to-rnaseq-hpc-O2/lessons/03_alignment.html)**.\n\n::: {.callout-tip title=\"Question\" icon=\"false\"}\nSo, for RNA-seq we need splice-aware aligners. Can you come up with an experiment that would not require a splice-aware aligner program?\n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\nIn experiments where we don't need to think about exon-intron boundaries. This is the case when the reads originate from genomic DNA, for example for whole genome sequencing experiments, or enrichment sequencing experiments like Chip-Seq. \n:::\n\nTo use an aligner, we must first get the **reference genome** and then *index* the reference genome. Indexing the genome prepares the genome in a way that allows a computer to search it efficiently. The genome, a multi-million basepair long string of text, is encoded into a different, computer-friendly datastructure such as a suffix tree. The details of this procedure are beyond the scope of this workshop, but it's important to do it. So, let's go ahead and download the *Arabidopsis thaliana* reference genome, and index it:\n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: Add download command here (via wget), OR already have the genome in the github repo\n# TODO: Add STAR index command here\n```\n\nAllright, let's finally run `STAR`: \n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: Add STAR command here\n```\n\nWe can inspect a mapping summary in a file generated by STAR called `final.out`:\n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: Add cat final.out output\n```\n\nIt's important to check how many reads did not map to the reference genome. A high proportion of unmapped reads can be a warning sign that something went wrong in your experiment or analysis. The explanations may be technical (bad read quality), bioinformatical (perhaps you used the wrong reference genome!), or biological --- it has been well documented that around 11% of primate and rodent cell-line RNA-seq datasets available on NCBI in 2015 were contaminated with mycoplasma RNA ([Olarerin-George & Hogenesch, 2015](https://pmc.ncbi.nlm.nih.gov/articles/PMC4357728/)). Likewise, 8,5% of all *Arabidopsis thaliana* NCBI RNA-seq datasets are contaminated with a virus that does not cause any disease symptoms, but can cover up to 80% of all reads generated in an RNA-seq experiment ([Verhoeven et al., 2022](https://nph.onlinelibrary.wiley.com/doi/full/10.1111/nph.18466)). That said, we don't need to aim for 100% reads mapped to the reference genome. There will always be some contamination, or your studied individual possesses genetic information not present in the reference genome. \n\n**TODO: (Maybe as an additional exercise?) Add one subsetted dataset to demonstrate this, from the verhoeven paper.**\n\n### BAM and SAM files\n\nThe mapped reads are stored in a `.bam` file by `STAR`. `.bam` and `.sam` files keep information for each individual read and its alignment to the genome. `.sam` files do this in a tab-seperated, human readable format, while `.bam` files store the same information in a binary file format that's not readable for humans, but is much more efficient to process and store by computers. `samtools` is a widely used program to inspect and manipulate `.sam` and `.bam` files. Like many command line programs, `samtools` commands can be connected to each other via the pipe symbol `|`, and the results can be stored in a new file using the `>` symbol. \n\n```{bash filename=\"bash\"}\n#| eval: false\nhead xyz.sam # TODO: add correct filename here\n```\n\n::: {.callout-tip title=\"Exercise\" icon=\"false\"}\nUse the `head` command to inspect a `.bam` file. \n\n1. What do you see?\n2. Use `samtools view` command, piped (using `|`) into a common Unix program, to inspect the first 10 lines of the file. \n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\n```{bash filename=\"bash\"}\n#| eval: false\nhead xyz.bam # TODO: add correct filename here\n```\n\nThe output looks like gibberish, because `.bam` files are a binary file format. You can use `samtools view` to make samtools read the binary file, and then pipe that result into the `head` function to show the first 10 lines:\n\n```{bash filename=\"bash\"}\n#| eval: false\nsamtools view xyz.bam | head # TODO: add correct filename here\n```\n:::\n\n::: {.callout-tip title=\"Exercise\" icon=\"false\"}\nUse the two following commands on a `.bam` file, and interpret the output.\n\n1. `samtools flagstat`\n2. `samtools idxstats` (Note: before running this command, you need to index the `.bam` file using `samtools index xyz.bam`) \n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\n\n1. `samtools flagstat` shows us (just like the `STAR` log file) how many reads were mapped correctly. In addition, it tells us whether read pairs (if mapping paired-end data) mapped together as expected.\n2. `samtools idxstats` shows us how many reads were mapped to each chromosome of the reference genome. This is useful to confirm whether the entire genome is evenly covered, or that there may be overrepresentation on e.g. the mitochondrial DNA.\n:::\n\n::: {.callout-tip title=\"Exercise\" icon=\"false\"}\nSo far, we only trimmed and mapped one sample. Write a `bash` for loop to process all four samples.\n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\n```{bash filename=\"bash\"}\n#| eval: false\nfor filename in  /datasets/*.fq.gz \n  do\n    # TODO: add trimmomatic command\n    # TODO: add STAR command\n  done\n```\n:::\n\n### Inspecting the mapping on a genome browser\n\n**TODO**:\n\n- download one bam + bai file and inspect mapping in genome browser\n- observe: only (or at least majority) reads map in genes (if this is not the case, something is wrong! either gDNA contamination, or bad annotation) \n- observe split reads across introns\n- we can't inspect all samples manually like this, so we will need to count reads, which we will do in the next section.\n\n\n## Counting: `featureCounts`\n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: add featureCounts command here\n```\n\n## A note on the specific tools used here\n\nIn bioinformatics, there are often many ways to reach the same goal. Here we have selected mapping, trimming and counting tools that we have available and have experience with, but there are many others that perform just as well. The following table highlights a few popular alternative options:\n\n| Task | Tool used here | Alternative tools |\n| ---- | -------------- | ----------------- |\n| Trimming | `Trimmomatic` | `cutadapt`, `fastp` |\n| Mapping | `STAR` | `HISAT2` |\n| Counting | `featureCounts` | `StringTie` |\n\n## Streamlining read mapping procedure\n\nIf you find this process quite cumbersome, then I have good news for you! There are *pipelines* available that streamline the chain of commands required for mapping:\n\n- [snakemake_rnaseq](https://github.com/BleekerLab/snakemake_rnaseq), developed at the Bleeker Lab (UvA).\n- [nf-core/rnaseq](https://nf-co.re/rnaseq/3.19.0), developed and maintained by the Nextflow community.\n\nA full instruction of these pipelines is beyond the scope of this workshop. Also, we wish to highlight that it is *very insightful* to have run all the steps by yourself rather than in a pipeline.","srcMarkdownNoYaml":"\n\nThe moment is there: you received the FASTQ files from your sequencing provider! Now what?\n\n## Quality control: `fastqc`\n\nThe first step in the RNA-seq workflow is to assess the quality of the sequencing reads. Sequence reads generated from next-generation sequencing technologies come in the FASTQ file format. This file format evolved from FASTA: it contains sequence data, but also contains quality information. For a single record (sequence read) there are four lines, each of which are described below:\n\n|Line|Description|\n|----|-----------|\n|1|Always begins with '@' and then information about the read|\n|2|The actual DNA sequence|\n|3|Always begins with a '+' and sometimes the same info in line 1|\n|4|Has a string of characters which represent the quality scores; must have same number of characters as line 2|\n\nLet's run `fastqc` on one sample:\n\n```{bash filename=\"bash\"}\n#| eval: false\nfastqc -o fastqc /datasets/Arabidopsis_sample1.fq.gz\n```\n\nDoing this manually for every sample would be quite tiring, especially when we would have many samples. Let's write a `bash` for loop to take care of this for us:\n\n```{bash filename=\"bash\"}\n#| eval: false\nfor filename in  /datasets/*.fq.gz # <1>\n  do\n    fastqc -o fastqc $filename # <2>\n  done\n```\n\n1. Here we define a variable `filename` that will subsequently get the values of all datasets matching the `/datasets/*.fq.gz` statement, where `*` acts as a wildcard.\n2. Here we add the actual command, where `$filename` will subsequently be filled in with all of our four filenames.\n\n`fastq` generates reports of each sample in `.html` format:\n\n```{bash filename=\"bash\"}\n#| eval: false\nls ... # TODO: add ls outcome here to show that we have 4 .html files now\n```\n\nLet's download one of them, and inspect the results:\n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: download to local instructions here (if you are working on a server)\n```\n\n`fastqc` gives the reads of each sample a score (Pass, Warning, or Fail) on several different modules and this is reported in the **Summary**. The next section contains basic statistics like the number of reads, average sequence length, and the GC content. Generally it is a good idea to keep track of the total number of reads sequenced for each sample and to make sure the read length and %GC content is as expected. One of the most important analysis modules is the **“Per base sequence quality”** plot. This plot provides the distribution of quality scores at each position in the read across all reads. This plot can alert us to whether there were any problems occuring during sequencing and whether we might need to contact the sequencing facility.  Other modules are discussed in detail [here](https://hbctraining.github.io/Intro-to-rnaseq-hpc-salmon/lessons/qc_fastqc_assessment.html). Note that nearly all sequencing datasets will show yellow warnings or red fails: `fastqc` is quite conservative. Your experiment is not lost if you get warnings or fails, but it warrants additional inspection of the reads.\n\n**TODO: add screenshots of good/bad fastqc results**\n\n## Trimming: `trimmomatic`\n\nA common anomaly detected by `fastqc` is sequencing adapters still being present some of the the reads (shown in **Overrepresented sequences** table). This is known as 'adapter contamination', and the presence of these adapter sequences in the reads might affect how the reads map to the genome of interest. So, we need to get rid of them. We will `trimmomatic` to do this. In addition, we can ask `trimmomatic` to trim low quality bases from the reads.\n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: add trimmomatic command here\n```\n\n::: {.callout-tip title=\"Exercise\" icon=\"false\"}\nAfter running `trimmomatic`, the adapter contamination should be gone.\n\n1. How could you check whether `trimmomatic` indeed did it's job?\n2. Write a command to check this.\n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\n1. We can run `fastqc` again, this time on the trimmed reads.\n2. \n```{bash filename=\"bash\"}\n#| eval: false\nfastqc -o /workspace/fastqc /datasets/Arabidopsis_sample1.trimmed.fq.gz\n```\nBy inspecting the `.html` report of the trimmed reads, we should see that the quality of the read sets has now improved.\n:::\n\n## Mapping: `STAR`\n\nOur reads are now ready for mapping. Mapping reads means figuring out where each read from the RNA-seq experiment originally came from within the genome. For RNA-seq experiments, it's important to pick a **splice-aware** aligner, since a RNA-seq read can span an exon-intron-exon boundary \n\n**TODO: add a figure here to demonstrate this, like the one found [here](https://hbctraining.github.io/Intro-to-rnaseq-hpc-O2/lessons/03_alignment.html)**.\n\n::: {.callout-tip title=\"Question\" icon=\"false\"}\nSo, for RNA-seq we need splice-aware aligners. Can you come up with an experiment that would not require a splice-aware aligner program?\n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\nIn experiments where we don't need to think about exon-intron boundaries. This is the case when the reads originate from genomic DNA, for example for whole genome sequencing experiments, or enrichment sequencing experiments like Chip-Seq. \n:::\n\nTo use an aligner, we must first get the **reference genome** and then *index* the reference genome. Indexing the genome prepares the genome in a way that allows a computer to search it efficiently. The genome, a multi-million basepair long string of text, is encoded into a different, computer-friendly datastructure such as a suffix tree. The details of this procedure are beyond the scope of this workshop, but it's important to do it. So, let's go ahead and download the *Arabidopsis thaliana* reference genome, and index it:\n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: Add download command here (via wget), OR already have the genome in the github repo\n# TODO: Add STAR index command here\n```\n\nAllright, let's finally run `STAR`: \n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: Add STAR command here\n```\n\nWe can inspect a mapping summary in a file generated by STAR called `final.out`:\n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: Add cat final.out output\n```\n\nIt's important to check how many reads did not map to the reference genome. A high proportion of unmapped reads can be a warning sign that something went wrong in your experiment or analysis. The explanations may be technical (bad read quality), bioinformatical (perhaps you used the wrong reference genome!), or biological --- it has been well documented that around 11% of primate and rodent cell-line RNA-seq datasets available on NCBI in 2015 were contaminated with mycoplasma RNA ([Olarerin-George & Hogenesch, 2015](https://pmc.ncbi.nlm.nih.gov/articles/PMC4357728/)). Likewise, 8,5% of all *Arabidopsis thaliana* NCBI RNA-seq datasets are contaminated with a virus that does not cause any disease symptoms, but can cover up to 80% of all reads generated in an RNA-seq experiment ([Verhoeven et al., 2022](https://nph.onlinelibrary.wiley.com/doi/full/10.1111/nph.18466)). That said, we don't need to aim for 100% reads mapped to the reference genome. There will always be some contamination, or your studied individual possesses genetic information not present in the reference genome. \n\n**TODO: (Maybe as an additional exercise?) Add one subsetted dataset to demonstrate this, from the verhoeven paper.**\n\n### BAM and SAM files\n\nThe mapped reads are stored in a `.bam` file by `STAR`. `.bam` and `.sam` files keep information for each individual read and its alignment to the genome. `.sam` files do this in a tab-seperated, human readable format, while `.bam` files store the same information in a binary file format that's not readable for humans, but is much more efficient to process and store by computers. `samtools` is a widely used program to inspect and manipulate `.sam` and `.bam` files. Like many command line programs, `samtools` commands can be connected to each other via the pipe symbol `|`, and the results can be stored in a new file using the `>` symbol. \n\n```{bash filename=\"bash\"}\n#| eval: false\nhead xyz.sam # TODO: add correct filename here\n```\n\n::: {.callout-tip title=\"Exercise\" icon=\"false\"}\nUse the `head` command to inspect a `.bam` file. \n\n1. What do you see?\n2. Use `samtools view` command, piped (using `|`) into a common Unix program, to inspect the first 10 lines of the file. \n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\n```{bash filename=\"bash\"}\n#| eval: false\nhead xyz.bam # TODO: add correct filename here\n```\n\nThe output looks like gibberish, because `.bam` files are a binary file format. You can use `samtools view` to make samtools read the binary file, and then pipe that result into the `head` function to show the first 10 lines:\n\n```{bash filename=\"bash\"}\n#| eval: false\nsamtools view xyz.bam | head # TODO: add correct filename here\n```\n:::\n\n::: {.callout-tip title=\"Exercise\" icon=\"false\"}\nUse the two following commands on a `.bam` file, and interpret the output.\n\n1. `samtools flagstat`\n2. `samtools idxstats` (Note: before running this command, you need to index the `.bam` file using `samtools index xyz.bam`) \n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\n\n1. `samtools flagstat` shows us (just like the `STAR` log file) how many reads were mapped correctly. In addition, it tells us whether read pairs (if mapping paired-end data) mapped together as expected.\n2. `samtools idxstats` shows us how many reads were mapped to each chromosome of the reference genome. This is useful to confirm whether the entire genome is evenly covered, or that there may be overrepresentation on e.g. the mitochondrial DNA.\n:::\n\n::: {.callout-tip title=\"Exercise\" icon=\"false\"}\nSo far, we only trimmed and mapped one sample. Write a `bash` for loop to process all four samples.\n:::\n\n::: {.callout-caution title=\"Solution\" collapse=\"true\" icon=\"false\"}\n```{bash filename=\"bash\"}\n#| eval: false\nfor filename in  /datasets/*.fq.gz \n  do\n    # TODO: add trimmomatic command\n    # TODO: add STAR command\n  done\n```\n:::\n\n### Inspecting the mapping on a genome browser\n\n**TODO**:\n\n- download one bam + bai file and inspect mapping in genome browser\n- observe: only (or at least majority) reads map in genes (if this is not the case, something is wrong! either gDNA contamination, or bad annotation) \n- observe split reads across introns\n- we can't inspect all samples manually like this, so we will need to count reads, which we will do in the next section.\n\n\n## Counting: `featureCounts`\n\n```{bash filename=\"bash\"}\n#| eval: false\n# TODO: add featureCounts command here\n```\n\n## A note on the specific tools used here\n\nIn bioinformatics, there are often many ways to reach the same goal. Here we have selected mapping, trimming and counting tools that we have available and have experience with, but there are many others that perform just as well. The following table highlights a few popular alternative options:\n\n| Task | Tool used here | Alternative tools |\n| ---- | -------------- | ----------------- |\n| Trimming | `Trimmomatic` | `cutadapt`, `fastp` |\n| Mapping | `STAR` | `HISAT2` |\n| Counting | `featureCounts` | `StringTie` |\n\n## Streamlining read mapping procedure\n\nIf you find this process quite cumbersome, then I have good news for you! There are *pipelines* available that streamline the chain of commands required for mapping:\n\n- [snakemake_rnaseq](https://github.com/BleekerLab/snakemake_rnaseq), developed at the Bleeker Lab (UvA).\n- [nf-core/rnaseq](https://nf-co.re/rnaseq/3.19.0), developed and maintained by the Nextflow community.\n\nA full instruction of these pipelines is beyond the scope of this workshop. Also, we wish to highlight that it is *very insightful* to have run all the steps by yourself rather than in a pipeline."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"03-mapping-reads.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.33","theme":"flatly","grid":{"sidebar-width":"250px","gutter-width":"3.5em"},"title":"From reads to alignments","code-annotations":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}