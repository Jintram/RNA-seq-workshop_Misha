[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to the RNA-seq workshop of the bioDSC. This workshop will introduce you to the basics of gene expression analysis using RNA-Seq. It is going to be fun and empowering! You will discover how the total RNA pool of an organism is converted to short sequences called “reads” that can in turn be used to get insights into gene expression. Through careful experimental design, this gene expression information can answer research questions and offer biological insights.\nThe workshop consists of two core parts:\nThe materials on this website are meant to be discussed in two four-hour trainer-led workshop sessions. However, it should also be possible to follow the materials on your own, at your own pace. Regardless of how you go through the materials, we hope that you will learn something useful!"
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "Welcome",
    "section": "Learning objectives",
    "text": "Learning objectives\nAfter this workshop, you should be able to:\n\nIdentify good practices when designing a RNA-Seq experiment\nAssess the quality of RNA-seq sequencing data (“reads”) using the command-line instructions\nAlign RNA-seq reads to a reference genome using a splice-aware aligner (e.g. STAR).\nGenerate a count matrix from the RNA-seq data alignment\nPerform a QC of your experiment through Principal Component Analysis (PCA) and sample clustering.\nExecute a differential gene expression analysis using R and the DESeq2 package.\nBe able to create key plots: volcano plot, heatmap and clustering of differentially expressed genes."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Welcome",
    "section": "Schedule",
    "text": "Schedule\ninsert table here"
  },
  {
    "objectID": "index.html#maintainers",
    "href": "index.html#maintainers",
    "title": "Welcome",
    "section": "Maintainers",
    "text": "Maintainers\nCurrent maintainers of this workshop page are members of the bioDSC (University of Amsterdam)."
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "Welcome",
    "section": "Credits",
    "text": "Credits\nThis workshop is based on other teaching materials available online. The primary source is the RNA-seq lesson designed by the Science Park Study Group, which in turn was based on Harvard Chan Bioinformatics Core RNA-seq materials."
  },
  {
    "objectID": "episodes/03-mapping-reads.html",
    "href": "episodes/03-mapping-reads.html",
    "title": "From fastq files to alignments",
    "section": "",
    "text": "The moment is there: you received the FASTQ files from your sequencing provider! Now what?",
    "crumbs": [
      "From fastq files to alignments"
    ]
  },
  {
    "objectID": "episodes/03-mapping-reads.html#quality-control-fastqc",
    "href": "episodes/03-mapping-reads.html#quality-control-fastqc",
    "title": "From fastq files to alignments",
    "section": "Quality control: fastqc",
    "text": "Quality control: fastqc\nThe first step in the RNA-seq workflow is to assess the quality of the sequencing reads. Sequence reads generated from next-generation sequencing technologies come in the FASTQ file format. This file format evolved from FASTA: it contains sequence data, but also contains quality information. For a single record (sequence read) there are four lines, each of which are described below:\n\n\n\n\n\n\n\nLine\nDescription\n\n\n\n\n1\nAlways begins with ‘@’ and then information about the read\n\n\n2\nThe actual DNA sequence\n\n\n3\nAlways begins with a ‘+’ and sometimes the same info in line 1\n\n\n4\nHas a string of characters which represent the quality scores; must have same number of characters as line 2\n\n\n\nLet’s run fastqc on one sample:\n\n\n\nbash\n\nfastqc -o /workspace/fastqc /datasets/Arabidopsis_sample1.fq.gz\n\n\nDoing this manually for every sample would be quite tiring, especially when we would have many samples. Let’s write a bash for loop to take care of this for us:\n\n\n\nbash\n\n1for filename in  /datasets/*.fq.gz\n  do\n2    fastqc -o fastqc $filename\n  done\n\n\n\n1\n\nHere we define a variable filename that will subsequently get the values of all datasets matching the /datasets/*.fq.gz statement, where * acts as a wildcard.\n\n2\n\nHere we add the actual command, where $filename will subsequently be filled in with all of our four filenames.\n\n\n\n\nfastq generates reports of each sample in .html format:\n\n\n\nbash\n\nls ... # ls the results folder here\n\n\nLet’s download one of them, and inspect the results:\n\n\n\nbash\n\n# download to local instructions here\n\n\nfastqc gives the reads of each sample a score (Pass, Warning, or Fail) on several different modules and this is reported in the Summary. TODO add screenshot. The next section contains basic statistics like the number of reads, average sequence length, and the GC content. Generally it is a good idea to keep track of the total number of reads sequenced for each sample and to make sure the read length and %GC content is as expected. One of the most important analysis modules is the “Per base sequence quality” plot. This plot provides the distribution of quality scores at each position in the read across all reads. This plot can alert us to whether there were any problems occuring during sequencing and whether we might need to contact the sequencing facility. TODO add screenshot good/bad plot. Other modules are discussed in detail here. Note that nearly all sequencing datasets will show yellow warnings or red fails: fastqc is quite conservative. Your experiment is not lost if you get warnings or fails, but it warrants additional inspection of the reads.",
    "crumbs": [
      "From fastq files to alignments"
    ]
  },
  {
    "objectID": "episodes/03-mapping-reads.html#trimming-trimmomatic",
    "href": "episodes/03-mapping-reads.html#trimming-trimmomatic",
    "title": "From fastq files to alignments",
    "section": "Trimming: trimmomatic",
    "text": "Trimming: trimmomatic\nA common anomaly detected by fastqc is sequencing adapters still being present some of the the reads (shown in Overrepresented sequences table). This is known as ‘adapter contamination’, and the presence of these adapter sequences in the reads might affect how the reads map to the genome of interest. So, we need to get rid of them. We will trimmomatic to do this. In addition, we can ask trimmomatic to trim low quality bases from the reads.\n\n\n\nbash\n\n# add trimmomatic command here\n\n\n\n\n\n\n\n\nExercise\n\n\n\nAfter running trimmomatic, the adapter contamination should be gone.\n\nHow could you check whether trimmomatic indeed did it’s job?\nWrite a command to check this.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nWe can run fastqc again, this time on the trimmed reads.\n\n\n\n\n\nbash\n\nfastqc -o /workspace/fastqc /datasets/Arabidopsis_sample1.trimmed.fq.gz\n\n\nBy inspecting the .html report of the trimmed reads, we see that that xyz warnings now show pass.",
    "crumbs": [
      "From fastq files to alignments"
    ]
  },
  {
    "objectID": "episodes/03-mapping-reads.html#mapping-star",
    "href": "episodes/03-mapping-reads.html#mapping-star",
    "title": "From fastq files to alignments",
    "section": "Mapping: STAR",
    "text": "Mapping: STAR\nOur reads are now ready for mapping. Mapping reads means figuring out where each read from the RNA-seq experiment originally came from within the genome. For RNA-seq experiments, it’s important to pick a splice-aware aligner, since a RNA-seq read can span an exon-intron-exon boundary (TODO: add a figure here to demonstrate this).\n\n\n\n\n\n\nQuestion\n\n\n\nSo, for RNA-seq we need splice-aware aligners. Can you come up with an experiment that would not require a splice-aware aligner program?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIn experiments where we don’t need to think about exon-intron boundaries. This is the case when the reads originate from genomic DNA, for example for whole genome sequencing experiments, or enrichment sequencing experiments like Chip-Seq.\n\n\n\nTo use an aligner, we must first get the reference genome and then index the reference genome. Indexing the genome prepares the genome in a way that allows a computer to search it efficiently. The genome, a multi-million basepair long string of text, is encoded into a different, computer-friendly datastructure such as a suffix tree. The details of this procedure are beyond the scope of this workshop, but it’s important to do it. So, let’s go ahead and download the Arabidopsis thaliana reference genome, and index it:\n\n\n\nbash\n\n# Index command here\n\n\nAllright, let’s finally run STAR:\n\n\n\nbash\n\n# run STAR here\n\n\nWe can inspect a mapping summary in a file generated by STAR called final.out:\n\n\n\nbash\n\n# cat final.out\n\n\nIt’s important to check how many reads did not map to the reference genome. A high proportion of unmapped reads can be a warning sign that something went wrong in your experiment or analysis. The explanations may be technical (bad read quality), bioinformatical (perhaps you used the wrong reference genome!), or biological — it has been well documented that around 11% of primate and rodent cell-line RNA-seq datasets available on NCBI in 2015 were contaminated with mycoplasma RNA (Olarerin-George & Hogenesch, 2015). Likewise, 8,5% of all Arabidopsis thaliana NCBI RNA-seq datasets are contaminated with a virus that does not cause any disease symptoms, but can cover up to 80% of all reads generated in an RNA-seq experiment (Verhoeven et al., 2022). That said, we don’t need to aim for 100% reads mapped to the reference genome. There will always be some contamination, or your studied individual possesses genetic information not present in the reference genome. TODO: add one (subset) of reads to demonstrate this, from the verhoeven paper\n\nBAM and SAM files\nThe mapped reads are stored in a .bam file by STAR. .bam and .sam files keep information for each individual read and its alignment to the genome. .sam files do this in a tab-seperated, human readable format, while .bam files store the same information in a binary file format that’s not readable for humans, but is much more efficient to process and store by computers. samtools is a widely used program to inspect and manipulate .sam and .bam files. Like many command line programs, samtools commands can be connected to each other via the pipe symbol |, and the results can be stored in a new file using the &gt; symbol.\n\n\n\nbash\n\nhead xyz.sam\n\n\n\n\n\n\n\n\nExercise\n\n\n\nUse the head command to inspect a .bam file.\n\nWhat do you see?\nUse samtools view command, piped into a common Unix program, to inspect the first 10 lines of the file.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n\nbash\n\nhead xyz.bam\n\n\nThe output looks like gibberish, because .bam files are a binary file format. You can use samtools view to make samtools read the binary file, and then pipe that result into the head function to show the first 10 lines: samtools view xyz.bam | head\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nUse the two following commands on a .bam file, and interpret the output.\n\nsamtools flagstat\nsamtools idxstats (Note: before running this command, you need to index the .bam file using samtools index xyz.bam)\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nsamtools flagstat shows us (just like the STAR log file) how many reads were mapped correctly. In addition, it tells us whether read pairs (if mapping paired-end data) mapped together as expected.\nsamtools idxstats shows us how many reads were mapped to each chromosome of the reference genome. Useful to detect whether the entire genome is evenly covered, or that there may be overrepresentation on e.g. the mitochondrial DNA.\n\n\n\n\n\n\nInspecting the mapping on a genome browser\n\ndownload one bam + bai file and inspect mapping in genome browser\nobserve: only (or at least majority) reads map in genes (if this is not the case, something is wrong! either gDNA contamination, or bad annotation) (idea: screenshot of weird mapping for a question/exercise).\nobserve split reads across introns\nwe can’t inspect all samples manually like this, so we will need to count reads, which we will do in the next section.\nalthough you could go and visualize your favorite gene later, of two samples with two treatments, to observe what differential expression may look like.",
    "crumbs": [
      "From fastq files to alignments"
    ]
  },
  {
    "objectID": "episodes/03-mapping-reads.html#counting-featurecounts",
    "href": "episodes/03-mapping-reads.html#counting-featurecounts",
    "title": "From fastq files to alignments",
    "section": "Counting: featureCounts",
    "text": "Counting: featureCounts",
    "crumbs": [
      "From fastq files to alignments"
    ]
  },
  {
    "objectID": "episodes/03-mapping-reads.html#a-note-on-the-specific-tools-used-here",
    "href": "episodes/03-mapping-reads.html#a-note-on-the-specific-tools-used-here",
    "title": "From fastq files to alignments",
    "section": "A note on the specific tools used here",
    "text": "A note on the specific tools used here\nAs in many things in programming: there are many ways to reach the same goal. Here we have selected mapping, trimming and counting tools that we have available and have experience with, but there are many others that perform just as well. The following table highlights a few popular alternative options:\n\n\n\nTask\nTool used here\nAlternative tools\n\n\n\n\nTrimming\nTrimmomatic\ncutadapt, fastp\n\n\nMapping\nSTAR\nHISAT2\n\n\nCounting\nfeatureCounts\nStringTie",
    "crumbs": [
      "From fastq files to alignments"
    ]
  },
  {
    "objectID": "episodes/02-experimental-considerations.html",
    "href": "episodes/02-experimental-considerations.html",
    "title": "Before the experiment",
    "section": "",
    "text": "Before diving into the bioinformatics of RNA-seq experiments, it’s good to take a step back and think about experimental design and refresh your statistical knowledge. After all, an RNA-seq experiment is also an experiment like any other.",
    "crumbs": [
      "Before the experiment"
    ]
  },
  {
    "objectID": "episodes/02-experimental-considerations.html#hypothesis-testing",
    "href": "episodes/02-experimental-considerations.html#hypothesis-testing",
    "title": "Before the experiment",
    "section": "Hypothesis testing",
    "text": "Hypothesis testing\nIn an RNA-seq experiment, you will analyze the expression levels of thousands of genes. Before doing that, let us consider statistical tests and their associated p-values for a single gene. Say you are studying a plant gene called “heat stress trancripion factor A-2 (HSFA2)”, whose expression might be induced by…. heat stress (you might have guessed that). You could phrase your null hypothesis:\n\n“The average HSFA2 gene expression is the same in normal conditions and under heat stress in my Arabidopsis seedlings”\n\nThe corresponding alternative hypothesis could then be:\n\n“The average HSFA2 gene expression is different under heat stress compared to normal conditions in my Arabidopsis seedlings”\n\nYou go into the greenhouse, sample 20 Arabidopsis thaliana plants in both control and heat stressed conditions, and measure the expression of HSF2A. Let’s visualize this in a boxplot made in R, using the ggplot2 package.\n\n\n\nR\n\nlibrary(tidyverse)\nset.seed(1992)\n\ncontrol &lt;- tibble(expression = rnorm(n = 20, mean = 2, sd = 0.6), \n                    condition = \"control\")\nheat_stress &lt;- tibble(expression = rnorm(n = 20, mean = 3.4, sd = 0.3),\n                    condition = \"heat stress\") \n                         \nexperiment &lt;- bind_rows(control, heat_stress)\n\nggplot(experiment, aes(x = condition, y = expression)) + \n    geom_boxplot(aes(fill = condition), alpha = 0.5, outlier.shape = NA) +\n    geom_jitter(width = 0.2, alpha = 0.5) +\n    theme_classic()\n\n\n\n\n\n\n\n\n\nIndeed, HSF2A is highly expressed in heat stressed plants. The thick line of the boxplots show the median HSF2A expression in both groups. The median is a measure of central tendency. You will also see that the individual datapoints are dispersed around the boxplot: quantifying this gives us a measure of the spread of the data. An example of such a measure of spread is the standard deviation. It looks like our heat stressed plants display a more narrow spread of the data.\n\n\n\n\n\n\nQuestion\n\n\n\nCan you name another measure of central tendency? And another one for the measure of spread?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nAnother often used measure of central tendency would be the mean. As for the measure of spread, the variance (square of the standard deviation) or the standard error (standard deviation divided by the square root of the number of observations) are often used.\n\n\n\nLet’s test whether the means of the two groups are equal or not. We do this with a two-sample t-test.\n\n\n\nR\n\nt.test(x = control$expression,\n       y = heat_stress$expression,\n       alternative = \"two.sided\" ,      \n       var.equal = FALSE,             # important as the variance do not seem equal\n       conf.level = 0.95)             # this corresponds to alpha = 0.05 \n\n\n\n    Welch Two Sample t-test\n\ndata:  control$expression and heat_stress$expression\nt = -12.237, df = 25.636, p-value = 3.312e-12\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -1.600116 -1.139603\nsample estimates:\nmean of x mean of y \n 1.970023  3.339883 \n\n\nBecause the p-value &lt; 0.05, we can safely reject our null hypothesis, and claim that we have discovered that Arabidopsis significantly upregulates the expression of HSF2A under heat stress. Sounds like it’s time to write this down and submit a manuscript to Nature!\n\nStatistical power\nStatistical power is the ability of your experimental sample to detect differences (in this case, gene expression differences) that actually exist in the real population of your study species out there in the world. There are two main error one could make when testing hypotheses. Type I errors occur when the null hypothesis is rejected wrongly — you detect a significant difference while in reality there is no difference in gene expression (“false positive”). Type II errors also are common in hypothesis testing — they arise if you accept the null hypothesis when in fact a treatment effect exists (“false negative”)\nThe power of an experiments is affected by several factors. We have seen so far:\n\nThe number of replicates: more samples results in a higher power\nSize of the effect: bigger changes are easier to detect\nVariability of the data: less noise is more power\nConfidence level threshold: usually, this is 0.05, but we can make our analysis more or less stringent by changing this to 0.01 or 0.1",
    "crumbs": [
      "Before the experiment"
    ]
  },
  {
    "objectID": "episodes/02-experimental-considerations.html#what-determines-the-power-of-an-rna-seq-experiment",
    "href": "episodes/02-experimental-considerations.html#what-determines-the-power-of-an-rna-seq-experiment",
    "title": "Before the experiment",
    "section": "What determines the power of an RNA-seq experiment?",
    "text": "What determines the power of an RNA-seq experiment?\nRNA-seq experiments measure the expression levels of thousands of genes simultaneously, meaning we perform thousands of statistical tests at once. To avoid making too many false discoveries (type I errors), we correct for multiple testing. However, it also reduces statistical power — increasing the chance of missing real differences (type II errors). As a result, RNA-seq experiments can have lower power, especially for detecting small or subtle changes in gene expression.\nSo, how do we deal with that? We have a few parameters to play with when designing an RNA-seq experiment, including deciding the number of reads per sample, and the number of samples per treatment. Liu et al., 2014 investigated this systematically in an RNA-seq experiment with a human cell line. An exerpt from figure 1 is show below:\n\nImage credits: Liu et al., 2014\nThe figure shows the relationship between sequencing depth and number of replicates on the number of differentially expressed genes (DEGs) identified. It illustrates that biological replicates are of greater importance than sequencing depth. Above 10M-15M reads per sample, the number of DEGs increases marginally, while adding more biological replicates tends to return more DEGs. So, if your experiment is limited by a certain sequencing budget, it is almost always better to add more replicates than to sequence more reads of a limited number of samples. TODO: add potential caveats here?",
    "crumbs": [
      "Before the experiment"
    ]
  },
  {
    "objectID": "episodes/02-experimental-considerations.html#experimental-design",
    "href": "episodes/02-experimental-considerations.html#experimental-design",
    "title": "Before the experiment",
    "section": "Experimental design",
    "text": "Experimental design\nIn a typical biological experiment, you will encounter various sources of variation that are either:\n\nDesirable because they are part of your experimental factors. For example, the genotype, treatment, or timepoint.\nUndesirable because you are not interested in them. This could be: batch of RNA isolation, location of plants in the greenhouse, …\n\nUndesirable variation is unavaidable, but there are some practices to limit their impact. First of all, make sure that you don’t confound your experimental factors with undesirable sources of variation. For example, if you have too many samples to isolate RNA in one day of labwork, make sure you don’t isolate RNA from samples with genotype A on day 1, and genotype B on day 2. In this case, you will never be able to know whether genes were differentially expressed because the genotypes of the samples differ (very interesting!) or because RNA was isolated on two different days (not very interesting). Instead, mix your samples of genotype A and B over your two RNA isolation days. Still, you should always record known sources of undesirable variation so you can correct for it later. There’s much more to be said about this, for more details see these materials from Harvard Chan Bioinformatics Core",
    "crumbs": [
      "Before the experiment"
    ]
  },
  {
    "objectID": "episodes/02-experimental-considerations.html#concluding-remarks",
    "href": "episodes/02-experimental-considerations.html#concluding-remarks",
    "title": "Before the experiment",
    "section": "Concluding remarks",
    "text": "Concluding remarks\nIn this section, we refreshed our statistics knowledge, and discussed how this applies to RNA-seq experiments. Hopefully, this enables you to craft a well-designed and controlled RNA-seq experiment. Now, head to the lab or greenhouse, perform your experiment, and extract high-quality RNA. How to do this will depend on your study system, and is beyond the scope of this workshop. We will see you again when you get the sequencing reads from the sequencing provider. We will then jump into the bioinformatics pipeline required to check the quality of the reads, and map the reads to the genome of your organisms of interest.",
    "crumbs": [
      "Before the experiment"
    ]
  }
]