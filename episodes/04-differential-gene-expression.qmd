---
title: "Differential gene expression analysis"
format:
    html:
        fig-width: 8
        fig-height: 4
        code-annotations: hover
---

::: {.mwadd}
(MW) 

## Feedback

I think this episode should already work pretty well, and covers most of the important things.

Imo, sometimes the text rather succinctly introduced difficult concepts and immediately assumes familiarity of the reader with them.
I added some basic explanation to some sections which I hope will address this, e.g. regarding:

- What does design formula mean
- What is goal and logic of PCA (plot)

Something that's really missing I think is talking about what "padj" means.
A diagram like below, or a more explanatory variation thereof, might be useful:

![Illustration of p-value adjustment (multiple testing correction), [source](https://geneviatechnologies.com/blog/what-is-multiple-testing-correction/).](../images/histogram-p-adjustment_geneviatech.png){fig-alt="p-value adjustment diagram" width=60%}

#### Additional stuff
- I made a little overview of how often different DEG analysis packages are cited last year; but don't think that's very valuable to add here.

:::

The main goal of most RNA-seq experiments is to discover which genes are differentially expressed between 
different groups (treatments, tissues, genotypes): the list of differentially expressed genes (DEGs). 
After the previous section, we now have a count table with the number of reads that map to each gene in each sample. 
How do we get to our goal from this table? We will need to use statistical models! In this section, 
we will use the `DESeq2` package in `R` for differential gene expression analysis. 
Several other packages with different statistical models and assumptions exist (e.g. `EdgeR` and `Limma`): 
we pick `DESeq2` because it is robust, widely-used, and user friendly <mwadd>[cite Li2022, others?]</mwadd>.

## Reading the count table into DESeq2

In this tutorial, we will explore the transcriptomes of *A. thaliana* plants that experienced microgravity by growing on the International Space Station, while control plants were grown on earth. The experimental design is simple: there are three replicates in both conditions `space_flight` and `ground_control`.

First we will load the packages that we need, and then load the count table and metadata file.

```{R filename = "R"}
#| warning: false
set.seed(1992) # some parts of analysis depend on random sampling or initialization; 
               # setting seed sets constant array of random numbers, ensuring reproducibility.
               # this won't affect main results too much, but is thorough

library(DESeq2)
library(tidyverse)
library(ggrepel)
```

<mwadd>(added comment above)</mwadd>

```{R filename = "R"}
raw_counts <- read.csv("../data/GLDS38_raw_counts.csv", header = T, stringsAsFactors = F) # <1>

raw_counts <- raw_counts %>% column_to_rownames("gene") # <2>

metadata <- read.csv("../data/samples_to_condition.csv", header = T)

raw_counts[1:4,1:4]
```
1. Make sure you use the correct path to where your data is stored. Depending on your folder structure, you may not need the `../` and you could use `data/GLDS38_raw_counts.csv` instead.
2. Here, we store the column `gene` as row names instead of a dedicated column.

That looks good! Now, it's important to note that `DESeq2` expects the sample names (columns in count table) to *exactly match* the sample names in the metadata file, and be in the *same order*! For this small dataset, we can inspect that by eye. In addition, and probably useful for larger datasets, we can use the `all()` function to check this.

```{R filename = "R"}
head(metadata)
```

```{R filename = "R"}
all(colnames(raw_counts) == metadata$sample) # <1>
```
1. If this does not return `TRUE`, you need to reorder or rename sample names in one of your files. 

### Creating the `dds` object

<mwadd>I edited the section below</mwadd>

We are now ready to create a `DESeqDataSet` object, commonly abbreviated as `dds`. 
<!--The `dds` object will contain our count tables and metadata, but later, also the normalized counts 
and differentially expressed gene lists.-->
We will put our count tables and metadata in this object, and use it as input for the DESeq2 functions.
DESeq2 functions will return this same object again, with added information such as normalized counts and differentially expressed genes.

<!--As such, the `dds` objects help us keep things neat in our RStudio session.-->
Storing all this related information in the one `dds` object helps keeps our R session clean.

To make one, we need to specify 
our experimental design 'formula'. In this tutorial, there's only one variable (*condition*): the design formula will 
be as simple as `~ condition`. However, in multi-factor experiments it can include additional variables, 
can also include unwanted sources of variation such as RNA isolation batch, the researcher who extracted RNA, 
or on which table the plants were grown. Including these factors in the design formula will help DESeq2 to 
account for these soures of variation, allowing more accurate estimation of the primary conditionâ€™s effect. 
For example, in an experiment with a potential batch effect, treatments, and different genotypes: `~ batch + treatment + genotype`. 
This notation is shorthand to tell DESeq2 that the final gene expression in each sample $y$ should be modelled as:
$$
y = \beta_0 + \beta_1 \cdot x_\text{batch} + \beta_2 \cdot x_\text{treatment} + \beta_3 \cdot x_\text{genotype} + \epsilon
$$
where $x_{...}$ is either one or zero depending on if the condition applies or not, and $\beta_i$ are constants that need to be fitted.
(Don't worry about the $\epsilon$, this is a technical way to express that the model is not perfect and there will always be some noise in the data.)
<mwadd>Risk of adding this is that's it's "scary math", but otherwise I think the design formulae remain very mysterious. 
We could add example.</mwadd>

If you also want to model the *interaction*, that is  whether the treatment effect varies by genotype, 
change the `+` to a `*`: `~ batch + treatment * genotype`. (Separate *treatment* and *genotype* terms will 
automatically be included in the model when using `*`.)

```{R filename = "R"}
dds <- DESeqDataSetFromMatrix(countData = raw_counts, 
                              colData = metadata, 
                              design = ~ condition)
```

<!--## Assesing the quality of an RNA-seq experiment via PCA-->
## A preliminary assessment of your data using PCA

<mwadd>(Changed title, as I think QC is put too strong.)</mwadd>

<mwadd>I think this is a very clear text concisely explaining PCA. I understand it very well, but 
I'm wondering though whether for novices it might be nice to add some more "explain it to me like I'm 5 years
old language" (exaggerated). Tried adding some some sentences and a graph.</mwadd>

As essential step in RNA-seq analysis is to inspect similarity between samples. In particular, 
we should confirm that **replicates with the same treatment are similar to each other**, and 
make sure that **the experimental condition is the major source of variation in the data**. 
In addition, these quality-control explorations will also help identify if any samples behalve as outliers, 
or whether there may have been a sample swap. 

It would be very nice if there was a visualization from which we can see how samples relate to each other.
For example an $x, y$ plot in which the distance between indicates their similarity.

![A visual comparison between sample similarity.](../images/Illustration_dimensionality_reduction.png){fig-alt="dimensionality reduction plot" width=20% style="background:#fff; float:left; margin-right:1em;"}

This exists!
We will use **Principal Component Analysis (PCA)** to do this. 
PCA is a dimensionality reduction technique that transforms complex high-dimensional data (like expression of thousands of genes) 
into a limited number of new variables ('principal components') that capture the most variation in the dataset. 



### Performing variance stabilization

Before performing the PCA itself, we need to take an import feature of RNA-seq data into account: the variance of a gene is strongly correlated to the expression level of the gene. In statistics language, our data is **not homoscedastic**, while PCA assumes homoscedastic data. We can solve this by performing a variance stabilizing transformation `vst()`:

```{R filename = "R"}
variance_stabilized_dataset <- vst(dds, blind = TRUE)
```

Let's inspect the average expression and standard deviation of each gene to show that this transformation worked. In the following plots, each dot represents one *A. thaliana* gene:

```{R filename = "R"}
#| code-fold: true
#| code-summary: "Show the code to make the plots"
library(patchwork)

without_vst <- raw_counts %>% 
    as.data.frame() %>% 
    rownames_to_column("gene") %>% 
    pivot_longer(cols = - gene, names_to = "sample", values_to = "count") %>% 
    group_by(gene) %>% 
    summarise(gene_mean = mean(count), gene_sd = sd(count)) %>% 
    ungroup() %>% 
    ggplot(aes(x = log10(gene_mean), y = log10(gene_sd))) +
    geom_point(alpha = 0.2) +
    labs(x = "Gene count average\n(log10 scale)",
        y = "Gene count standard deviation\n(log10 scale)") +
    ggtitle("No variance stabilization")
    
variance_stabilised_counts <- assay(variance_stabilized_dataset)

with_vst <- variance_stabilised_counts %>% 
  as.data.frame() %>% 
  rownames_to_column("gene") %>% 
  pivot_longer(cols = - gene, names_to = "sample", values_to = "count") %>% 
  group_by(gene) %>% 
  summarise(gene_mean = mean(count), gene_sd = sd(count)) %>% 
  ungroup() %>% 
  ggplot(aes(x = log10(gene_mean), y = log10(gene_sd))) +
  geom_point(alpha = 0.2) +
  labs(x = "Gene count average\n(log10 scale)",
       y = "Gene count standard deviation\n(log10 scale)") +
  ggtitle("Variance stabilized")

without_vst | with_vst

variance_stabilised_counts_df <- variance_stabilised_counts %>%
  as.data.frame() %>% 
  rownames_to_column("gene")  
write.csv(variance_stabilised_counts_df, "../data_processed/variance_stabilized_dataset.csv", row.names=FALSE)
```
Indeed, we can observe that genes that are highly expressed (have high mean count) also have a high standard deviation. This correlation is no longer there after stabilizing the variance.

### Performing the PCA

<mwadd>I think we'll need to explain what we're doing and seeing a bit more in this section. I made some edits.</mwadd>

Okay, finally we are ready to perform the PCA. `DESeq2` makes this very easy for us with a simple function, 
`plotPCA()`, which directly gives us a PCA plot. 

```{R filename = "R"}
plotPCA(variance_stabilized_dataset)
```

#### Understanding the PCA plot

What do we see here? Dots correspond to samples, and the distance between points corresponds to gene expression similarity. 

The x and y axis correspond to PC1 and PC2, PC standing for "principal component". 
We won't go into the details of PCA here, but will try to briefly explain what is plotted here.
We could have selected two arbitrary genes and put those x and y axis, which would also produced a similar plot. 
But we can choose from many genes to do this, and we don't know which ones relate to relevant changes.
Instead, PCA formulates "principal components" (there are actually many more than PC1 and PC2, there's also PC3, PC4, et cetera).
When moving a step along a PC axis, this is related to specific changes *in all genes*.
The PCs are chosen such, that most gene expression variance seen between the samples can be described by taking steps along PC1. 
Variance that couldn't be captured in PC1, ie because it is of a different kind, is described by PC2, or PC3, et cetera.

#### Interpretation

So what can we learn from the PCA plot?

- We see that principal component 1 (`PC1`) explains 60% of the variance, while `PC2` explains 29%. Those are nice scores. However, `PC1` does not seem to separate our two conditions. This means that there's another source of variation in this dataset that we are seemingly unaware of.
- We see that `PC2` nicely separates our two conditions. This is good!  
- We see that two samples from `space_flight` cluster very closely together, while one sample is quite a distant from those two. This means that this one replicate behaves a bit differently than the rest. However, since it's still similar to the other two samples on the `PC2` axis, this does not worry me.

#### Refining the PCA analysis plot

If you want to have full control and make the PCA plot yourself in `ggplot`, you can add `returnData=TRUE)`

```{R filename = "R"}
#| eval: false
pca_data <- plotPCA(variance_stabilized_dataset, returnData=TRUE) 
```

While it is impossible to give examples of all situations that can occur in PCAs, we highlight a few below in fake PCA plots:

```{R filename = "R"}
#| code-fold: true
#| code-summary: "Show the code to make the plots"

df_swap <- data.frame(
  PC1 = c(rnorm(5, mean = 1, sd = 0.2),   
          rnorm(5, mean = -2, sd = 0.2)), 
  PC2 = c(rnorm(5, mean = 0.4, sd = 0.2),
          rnorm(5, mean = 0.3, sd = 0.2)),
  genotype = c(rep("WT", 4), "mutant", rep("mutant", 4), "WT"))

df_weak_sep <- data.frame(
  PC1 = c(rnorm(5, mean = 0.2, sd = 0.45),   
          rnorm(5, mean = 0, sd = 0.6)), 
  PC2 = c(rnorm(5, mean = 0, sd = 0.25),
          rnorm(5, mean = 0, sd = 0.25)),
  genotype = rep(c("WT", "mutant"), each = 5)
)

p1 <- df_swap %>% ggplot(aes(x = PC1, y = PC2, colour = genotype)) + geom_point() +
  xlab("PC1 (48%)") +
  ylab("PC2 (13%)") +
  ggtitle("Sample swap")

p2 <- df_weak_sep %>% ggplot(aes(x = PC1, y = PC2, colour = genotype)) + geom_point() +
    xlab("PC1 (12%)") +
    ylab("PC2 (4%)") +
    ggtitle("Weak separation")

p1 | p2
```

In the first plot, we see one WT sample clustering with mutant samples, and vice versa. This is a clear indication that two samples were swapped somewhere in the process: during sampling, RNA extraction, cDNA synthesis, library prep, or in the metadata file. If you can trace this back in your labjournal, you could swap the sample label back. If not... it's probably better to discard these two samples completely. In the second plot, we can see that there's no clear separation between WT and mutant samples. In addition, the two PCs explain little of the variance present in the dataset. This is an indication that the genotype actually has little impact on the transcriptome. While worrying, this does not mean that all is lost! You can still proceed to differential expression analysis, maybe the difference between the two genotypes is quite subtle. 

```{R filename = "R"}
#| code-fold: true
#| code-summary: "Show the code to make the plots"
df_confounding_1 <- data.frame(
  PC1 = c(rnorm(5, mean = 1, sd = 0.45),   
          rnorm(5, mean = -1, sd = 0.6)), 
  PC2 = c(rnorm(5, mean = 0, sd = 0.25),
          rnorm(5, mean = 0, sd = 0.25)),
  genotype = rep(c("WT", "mutant"), each = 5),
  gender = rep(c("male", "female"), each = 5)
)

p1 <- df_confounding_1 %>% ggplot(aes(x = PC1, y = PC2, colour = genotype)) + geom_point() +
  xlab("PC1 (48%)") +
  ylab("PC2 (13%)") +
  ggtitle("Genotype effect ...")

p2 <- df_confounding_1 %>% ggplot(aes(x = PC1, y = PC2, colour = gender)) + geom_point() +
  xlab("PC1 (48%)") +
  ylab("PC2 (13%)") +
  ggtitle("... or gender effect?")

p1 | p2
```

In this example, we see separation of our wildtype and mutant samples. Experiment succesful! ... or is it? Upon closer inpection, we can see that gender of our samples also separates our samples in the same way. It turns out that all wildtypes were male mice, and all mutants were female. We will therefore never know if differentially expressed genes are caused by the genotype, or simply by the gender of the mice: a clear case of confounding variable. This is an experimental design flaw, and should have been caught before sampling. Yet, it happens!

::: {.callout-tip title="Question" icon="false"}
Besides PCA, how else could you assess whether replicate samples from the same treatment show similar results?
:::

::: {.callout-caution title="Solution" collapse="true" icon="false"}
We can use a correlation analysis to do this. For this analysis, we will also need the variance stabilized counts.

```{R filename="R"}
library(pheatmap)

correlation_matrix <- cor(variance_stabilised_counts)

metadata_2 <- metadata %>% column_to_rownames("sample_name")

pheatmap(correlation_matrix, annotation_row = metadata_2, 
         clustering_distance_rows = "correlation", 
         clustering_distance_cols = "correlation", 
         display_numbers = TRUE, fontsize = 7)
```
We can see that all the `ground_control` and `space_flight` samples cluster together. For example, `ground_control` samples have a 0.98 or greater correlation with each other, while they have a slightly lower correlation with `space_flight` samples. However, the samples still have a high correlation also accross the different treatment. This shows that the transcriptomes are actually highly similar, regardless of treatment, probably because the majority of genes is not differentially expressed. 
:::

<!--## Differential gene expression analysis-->
## Differentially expressed genes analysis
<mwadd>Minor: If we talk about DEG analysis, we shouldn't we say "differentially expresed genes analysis" when spelling it out?-- I edited this now.</mwadd>

Finally, now that we've finished our preliminary analysis of the data, we can proceed with differentially expressed genes (DEG) analysis!

`DESeq2` handles all steps of DEG analysis, from sample normalization to the statistical models and tests in one function. Easy! We run this function with the `dds` object as input, while storing the output in the `dds` object as well. In this way, we will 'fill' the `dds` object with the new analysis. `R` will now print all the individual steps that the `DESeq()` function performed for us. 

```{R filename="R"}
dds <- DESeq(dds)
```

**TODO:** 

- show plot of normalization effect
- Write scaled counts to file

### Lists of DEGs

Now, to extract the list of DEGs from the `dds` we run another line of code. The argument `alpha` is used to specify the *p*-value cutoff for significance, the default value is `alpha = 0.1`. We will use 0.05 here. We will also sort the table on *p*-value:

```{R filename="R"}
res <- results(dds, alpha = 0.05) # <1>

DEGs <- res %>%    # <2>
  as.data.frame() %>% 
  rownames_to_column("genes") %>%
  mutate(minus_log10_pvalue = -log10(padj)) %>% 
  arrange(padj) 

head(DEGs) 

write.csv(DEGs, '../data_processed/all_genes_spaceflight_vs_ground.csv', quote = FALSE, row.names = FALSE) # <3>
```
1. Generate results table
2. Turn results table into a data frame, generate a `genes` column from the rownames, make a new column with `-log10` transformed p-values, then sort by adjusted p-value.
3. Write to a file!

**TODO**: 

- Explain the DEGs dataframe, what is base mean, what is log2 fold change?
- Look at DESeq2 shrinkage of fold changes
- Add piece on extra contrasts
- <mwadd>Talk about the difference between pvalue and padj!</mwadd>

### Volcano plots

One way to visualize DEG results is to display them in a Volcano plot. Such a plot shows a measure of effect size (log2 fold changes) versus a measure of significance. There are [tools available](https://goedhart.shinyapps.io/VolcaNoseR/) (developed by Joachim Goedhart, assistant professor at SILS) to help you make such a plot using the DEG list we just saved as a `.csv` file. Alternatively, we can make one ourselves for full control of the plot:

```{R filename="R"}
# Define fold change and p-value cutoffs
lfc_cutoff <- 1.5
padj_cutoff <- 0.05

# Make new categorical variable containing significance information
DEGs <- DEGs %>% 
        mutate(significance = case_when(
          padj < padj_cutoff & log2FoldChange > lfc_cutoff ~ 'Significantly upregulated',
          padj < padj_cutoff & log2FoldChange < -lfc_cutoff ~ 'Significantly downregulated',
          padj < padj_cutoff ~ 'Significant but small effect size',
          TRUE ~ 'Not significant'
        ))

DEGs_subset <- DEGs %>% filter(significance == "Significantly upregulated" | significance == "Significantly downregulated")
write.csv(DEGs_subset, '../data_processed/DEGs_spaceflight_vs_ground.csv', quote = FALSE, row.names = FALSE)

colors <- c("Significantly upregulated"="#E69F00", "Significantly downregulated"="#56B4E9", "Not significant"="gray80", "Significant but small effect size" = 'grey50')

# select top 10 genes to highlight
top_genes <- DEGs[1:10, ]

volcano <- DEGs %>% 
  ggplot(aes(x = log2FoldChange, y = -log10(padj), colour = significance)) +
  geom_point(alpha = 0.5, size = 0.8) + 
  geom_hline(aes(yintercept = -log10(padj_cutoff)), linetype = "dashed") +
  geom_vline(aes(xintercept = lfc_cutoff), linetype = "dashed") +
  geom_vline(aes(xintercept = -lfc_cutoff), linetype = "dashed") +
  geom_point(data = top_genes, shape = 21,fill = NA, color = "black") +  # Highlight top10
  geom_text_repel(data = top_genes, aes(label = genes), size = 2, min.segment.length = 0) +
  scale_color_manual(values=colors) +
  xlim(c(-10,10)) +
  theme_bw() 

ggsave("volcano_plot.png", volcano, width = 14, height = 8, units = "cm")
volcano 
```
We can plot the DESeq2-normalized counts of two genes, just to confirm whether the volcano plot is correct. We pick one that is highly upregulated in `space_flight`conditions (AT5G04120), and one that is strongly downregulated (AT1G62280). 

```{R filename="R"}
#| fig-width: 4
#| fig-height: 2
gene_1 <- plotCounts(dds, gene="AT5G04120", intgroup="condition", 
                returnData=TRUE)

gene_2 <- plotCounts(dds, gene="AT1G62280", intgroup="condition", 
                        returnData=TRUE)

gene_1 %>% ggplot(aes(x = condition, y = count, colour = condition)) +
  geom_jitter(width = 0.05) +
  theme_bw()
gene_2 %>% ggplot(aes(x = condition, y = count, colour = condition)) +
  geom_jitter(width = 0.05) +
  theme_bw()
```
Yep, that seems about right.

### What's next

<mwadd>Added link to overall process.</mwadd>

Hopefully, your experiment yielded many genes that showed differential expression that was significant.
This also poses you with a problem: which of those are biologically most relevant to look into further?
How do we e.g. sort out 200+ differentially expressed genes, what do those expression changes mean, to which 
biological processes do these relate?

Perhaps you had a very clearly defined hypothesis, and can link some of the top differentially expressed genes to your research question.
Great!

Otherwise (and more common probably) you'll need to now start a carefull dissection of your results to design validation and follow-up experiments.
This can be done by many means, which we'll partially dive into in the next section.

Next, we will display the our gene expression data in a heatmap, another popular plot of choice for RNA-seq experiments. 
In addition, we will look into charactering the molecular functions of up- and down-regulated genes using GO term annotation and enrichment.