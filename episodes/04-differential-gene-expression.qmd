---
title: "Differential gene expression"
format:
    html:
        fig-width: 8
        fig-height: 4
        code-annotations: hover
---

The main goal of most RNA-seq experiments is to discover which genes are differentially expressed between different groups (treatments, tissues, genotypes): the list of differentially expressed genes (DEGs). After the previous section, we now have a big count table with the number of reads that map to each gene in each sample. How do we get to our goal from this table? We will need to use statistical models! In this section, we will use the `DESeq2` package in `R` for differential gene expression analysis. Several other packages with different statistical models and assumptions exist (e.g. `EdgeR` and `Limma`), but `DESeq2` is robust, widely-used, and user friendly.

## Reading the count table into DESeq2

In this tutorial, we will explore the transcriptomes of *A. thaliana* plants that experienced microgravity by growing on the International Space Station, while control plants were grown on earth. The experimental design is simple: there are three replicates in both conditions `space_flight` and `ground_control`.

First we will load the packages that we need, and then load the count table and metadata file.

```{R filename = "R"}
#| warning: false
set.seed(1992)

library(DESeq2)
library(tidyverse)
```

```{R filename = "R"}
raw_counts <- read.csv("../data/GLDS38_raw_counts.csv", header = T, stringsAsFactors = F) # <1>

raw_counts <- raw_counts %>% column_to_rownames("gene") # <2>

metadata <- read.csv("../data/samples_to_condition.csv", header = T)

raw_counts[1:4,1:4]
```
1. Make sure you use the correct path to where your data is stored. Depending on your folder structure, you may not need the `../` and you could use `data/GLDS38_raw_counts.csv` instead.
2. Here, we store the column `gene` as row names instead of a dedicated column.

That looks good! Now, it's important to note that `DESeq2` expects the sample names (columns in count table) to *exactly match* the sample names in the metadata file, and be in the *same order*! For this small dataset, we can inspect that by eye. In addition, and probably useful for larger datasets, we can use the `all()` function to check this.

```{R filename = "R"}
head(metadata)
```

```{R filename = "R"}
all(colnames(raw_counts) == metadata$sample) # <1>
```
1. If this does not return `TRUE`, you need to reorder or rename sample names in one of your files. 

**TODO: purposely make out of order the metadata file! and use `match()` to reorder it?**

### Creating the `dds` object

We are now ready to create a `DESeqDataSet` object, commonly abbreviated as `dds`. The `dds` object will contain our count tables and metadata, but later, also the normalized counts and differentially expressed gene lists. As such, the `dds` objects help us keep things neat in our RStudio session. To make one, we need to specify our experimental design 'formula'. In this tutorial, there's only one variable: the design formula will be as simple as `~ condition`. However, in multi-factor experiments it can include additional variables, can also include unwanted sources of variation such as RNA isolation batch, the researcher who extracted RNA, or on which table the plants were grown. Including these factors in the design formula will help DESeq2 to account for these soures of variation, allowing more accurate estimation of the primary conditionâ€™s effect. For example, in an experiment with a potential batch effect, treatments, and different genotypes: `~ batch + treatment + genotype`. If you also want to model the *interaction*, that is  whether the treatment effect varies by genotype, change the `+` to a `*`: `~ batch + treatment * genotype`.

```{R filename = "R"}
dds <- DESeqDataSetFromMatrix(countData = raw_counts, 
                              colData = metadata, 
                              design = ~ condition)
```

## Assesing the quality of an RNA-seq experiment via PCA

As essential step in RNA-seq analysis is to inspect similarity between samples. In particular, we should confirm that **replicates with the same treatment are similar to each other**, and make sure that **the experimental condition is the major source of variation in the data**. In addition, these quality-control explorations will also help identify if any samples behalve as outliers, or whether there may have been a sample swap. We will use **Principal Component Analysis (PCA)** to do this. PCA is a dimensionality reduction technique that transforms complex high-dimensional data (like expression of thousands of genes) into a limited number of new variables ('principal components') that capture the most variation in the dataset. 

### Performing variance stabilization

Before performing the PCA itself, we need to take an import feature of RNA-seq data into account: the variance of a gene is strongly correlated to the expression level of the gene. In statistics language, our data is  **not homoscedastic**, while PCA assumed homoscedastic data. We can solve this by performing a variance stabilizing transformation `vst()`:

```{R filename = "R"}
variance_stabilized_dataset <- vst(dds, blind = TRUE)
```

Let's inspect the average expression and standard deviation of each gene to show that this transformation worked. In the following plots, each dot represents one *A. thaliana* gene:

```{R filename = "R"}
#| code-fold: true
#| code-summary: "Show the code to make the plots"
library(patchwork)

without_vst <- raw_counts %>% 
    as.data.frame() %>% 
    rownames_to_column("gene") %>% 
    pivot_longer(cols = - gene, names_to = "sample", values_to = "count") %>% 
    group_by(gene) %>% 
    summarise(gene_mean = mean(count), gene_sd = sd(count)) %>% 
    ungroup() %>% 
    ggplot(aes(x = log10(gene_mean), y = log10(gene_sd))) +
    geom_point(alpha = 0.2) +
    labs(x = "Gene count average\n(log10 scale)",
        y = "Gene count standard deviation\n(log10 scale)") +
    ggtitle("No variance stabilization")
    
variance_stabilised_counts <- assay(variance_stabilized_dataset)

with_vst <- variance_stabilised_counts %>% 
  as.data.frame() %>% 
  rownames_to_column("gene") %>% 
  pivot_longer(cols = - gene, names_to = "sample", values_to = "count") %>% 
  group_by(gene) %>% 
  summarise(gene_mean = mean(count), gene_sd = sd(count)) %>% 
  ungroup() %>% 
  ggplot(aes(x = log10(gene_mean), y = log10(gene_sd))) +
  geom_point(alpha = 0.2) +
  labs(x = "Gene count average\n(log10 scale)",
       y = "Gene count standard deviation\n(log10 scale)") +
  ggtitle("Variance stabilized")

without_vst | with_vst
```
Indeed, we can observe that genes that are highly expressed (have high mean count) also have a high standard deviation. This correlation is no longer there after stabilizing the variance.

### Performing the PCA

Okay, finally we are ready to make our PCA. `DESeq2` makes this very easy for us with a simple function:

```{R filename = "R"}
plotPCA(variance_stabilized_dataset)
```

Let's break this plot down:

- We see that principal component 1 (`PC1`) explains 60% of the variance, while `PC2` explains 29%. Those are nice scores. However, `PC1` does not seem to separate our two conditions. This means that there's another source of variation in this dataset that we are seemingly unaware of.
- We see that `PC2` nicely separates our two conditions. This is good!  
- We see that two samples from `space_flight` cluster very closely together, while one sample is quite a distant from those two. This means that this one replicate behaves a bit differently than the rest. However, since it's still similar to the other two samples on the `PC2` axis, this does not worry me.

While it is impossible to give examples of all situations that can occur in PCAs, we highlight a few below in fake PCA plots:

```{R filename = "R"}
#| code-fold: true
#| code-summary: "Show the code to make the plots"

df_swap <- data.frame(
  PC1 = c(rnorm(5, mean = 1, sd = 0.2),   
          rnorm(5, mean = -2, sd = 0.2)), 
  PC2 = c(rnorm(5, mean = 0.4, sd = 0.2),
          rnorm(5, mean = 0.3, sd = 0.2)),
  genotype = c(rep("WT", 4), "mutant", rep("mutant", 4), "WT"))

df_weak_sep <- data.frame(
  PC1 = c(rnorm(5, mean = 0.2, sd = 0.45),   
          rnorm(5, mean = 0, sd = 0.6)), 
  PC2 = c(rnorm(5, mean = 0, sd = 0.25),
          rnorm(5, mean = 0, sd = 0.25)),
  genotype = rep(c("WT", "mutant"), each = 5)
)

p1 <- df_swap %>% ggplot(aes(x = PC1, y = PC2, colour = genotype)) + geom_point() +
  xlab("PC1 (48%)") +
  ylab("PC2 (13%)")

p2 <- df_weak_sep %>% ggplot(aes(x = PC1, y = PC2, colour = genotype)) + geom_point() +
    xlab("PC1 (12%)") +
    ylab("PC2 (4%)") 

p1 | p2
```

In the first plot, we see one WT sample clustering with mutant samples, and vice versa. This is a clear indication that two samples were swapped somewhere in the process: during sampling, RNA extraction, cDNA synthesis, library prep, or in the metadata file. If you can trace this back in your labjournal, you could swap the sample label back. If not... it's probably better to discard these two samples completely. In the second plot, we can see that there's no clear separation between WT and mutant samples. In addition, the two PCs explain little of the variance present in the dataset. This is an indication that the genotype actually has little impact on the transcriptome. While worrying, this does not mean that all is lost! You can still proceed to differential expression analysis, maybe the difference between the two genotypes is quite subtle. 

```{R filename = "R"}
#| code-fold: true
#| code-summary: "Show the code to make the plots"
df_confounding_1 <- data.frame(
  PC1 = c(rnorm(5, mean = 1, sd = 0.45),   
          rnorm(5, mean = -1, sd = 0.6)), 
  PC2 = c(rnorm(5, mean = 0, sd = 0.25),
          rnorm(5, mean = 0, sd = 0.25)),
  genotype = rep(c("WT", "mutant"), each = 5),
  gender = rep(c("male", "female"), each = 5)
)

p1 <- df_confounding_1 %>% ggplot(aes(x = PC1, y = PC2, colour = genotype)) + geom_point() +
  xlab("PC1 (48%)") +
  ylab("PC2 (13%)") 

p2 <- df_confounding_1 %>% ggplot(aes(x = PC1, y = PC2, colour = gender)) + geom_point() +
  xlab("PC1 (48%)") +
  ylab("PC2 (13%)") 

p1 | p2
```

In this example, we see separation of our wildtype and mutant samples. Experiment succesful! ... or is it? Upon closer inpection, we can see that gender of our samples also separates our samples in the same way. It turns out that all wildtypes were male mice, and all mutants were female. We will therefore never know if differentially expressed genes are caused by the genotype, or simply by the gender of the mice: a clear case of confounding variable. This is an experimental design flaw, and should have been caught before sampling. Yet, it happens!

## Differential gene expression analysis

`DESeq2` handles all steps of DEG analysis, from sample normalization to the statistical models and tests in one function. Easy! We run this function with the `dds` object as input, while storing the output in the `dds` object as well. In this way, we will 'fill' the `dds` object with the new analysis. `R` will now print all the individual steps that the `DESeq()` function performed for us. 

```{R filename="R"}
dds <- DESeq(dds)
```

**TODO: show plot of normalization effect**

### Lists of DEGs

Now, to extract the list of DEGs from the `dds` we run another line of code. The argument `alpha` is used to specify the *p*-value cutoff for significance, the default value is `alpha = 0.1`. We will use 0.05 here. We will also sort the table on *p*-value:

```{R filename="R"}
res <- results(dds, alpha = 0.05) # <1>

DEGs <- res %>%    # <2>
  as.data.frame() %>% 
  rownames_to_column("genes") %>%
  arrange(padj) 

head(DEGs) 

write.csv(DEGs, 'DEGs_spaceflight_vs_ground.csv') # <3>
```
1. Generate results table
2. Turn results table into a data frame, generate a `genes` column from the rownames, then sort by adjusted p-value
3. Write to a file!

### Volcano plots

### Heatmaps

